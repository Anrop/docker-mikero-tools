<html>

<head>
<meta http-equiv="Content-Language" content="en-au">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>well here we are</title>
</head>

<body>

<font face="Arial">
<p>MakePbo version 1.xx by mikero.</p>
<p>see readmegeneral.txt and fixes</p>
<p>for obfuscation see end of document</p>
<hr>
<p>MakePbo is a venerable program that dates back to the origins of OFP's cwc. 
It maintains full compatibility with those products while creating pbo's for 
Arma3 (and beyond)</p>
<p>As such, be a little kind when reading the documentation (and some of the 
idiosyncratic -options). Some of it will not make sense to the context you are 
trying to achieve, eg making an arma mission or addon.</p>
<p>Makepbo is by no means difficult to use, often simply requiring nothing more 
than</p>
<p><b>&nbsp;&nbsp;&nbsp; MakePbo NameOfFolder</b></p>
<p>Both the dll, and the exe itself, use heuristics in examining the folder 
contents to 'understand' what you're trying to achieve. This makes it as easy 
for&nbsp; a mission maker, as an addon maker, to use Makepbo without a plethora 
of options. Makepbo will figure most of it out, dependent on context of the 
folder and what it contains.</p>
<p>But, a wealth of -options are available dependent on what you are trying to 
achieve (compressed files, altered prefix, un-included files, date-stamps, auto 
conversion of wav), the list goes on...</p>
<p><b>ALL </b>pbo types are supported by MakePbo: Ranging from ofp-cwc thru to 
arma3 / vbs lite with the sole exception of ebo files (genuine vbs2)</p>
<p>Be aware, immediately that a 'pbo' can have several different extensions. 
Specifically</p>
<ul>
  <li>pbo</li>
  <li>ebo</li>
  <li>xbo</li>
  <li>ifa</li>
</ul>
<p>The general case is that MakePbo will decide what extension to use. </p>
<hr>
<p><b>Syntax: MakePbo [-options] Full\Path\To\Foldername [destpath 
and/or pboname[.pbo|ebo|xbo|ifa]]</b></p>
<p>Despite the wealth of options available, the most common and generally 
accurate syntax is</p>
<p><b>&nbsp;&nbsp;&nbsp; makepbo Full\Path\To\Foldername</b></p>
<p>Foldername.pbo will be produced in the parent folder of foldername</p>
<p><b>Options:</b> (case INsensitive)</p>
<ul>
  <li>-A ArmA (default)</li>
  <li>-C CWC</li>
  <li>-R Resistance </li>
  <li>-E Elite</li>
  <li>-Ve VBS2 EBO (not implemented)</li>
  <li>-Vm1 Vbslite pbo UK Mission</li>
  <li>-Vm2 Vbslite pbo US Mission</li>
  <li>-Vx1 xbo file UK</li>
  <li>-Vx2 xbo file US<br>
  -F rebuild requiredAddons<br>
  -! obfuscate</li>
  <li>-N do Nothing special. Make a pbo wysiwig</li>
  <li>-B Binarise (default) Binarises all rapifiable files.</li>
  <li>-L Lintcheck: check any file that is rapifiable text (*.rvmat eg) but commit 
as unbinarised</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rapifiable 
files (currently) mean</p>
<blockquote>
  <ul>
    <li>*.rvmat</li>
    <li>*.bisurf</li>
    <li>*.fsm</li>
    <li>*.sqm</li>
    <li>*.bikb</li>
    <li>*.cpp</li>
    <li>*.ext&nbsp; (never saved as such)</li>
  </ul>
</blockquote>
<ul>
  <li>-T deprecated</li>
  <li>-M do not binarise mission.sqm</li>
  <li>&nbsp;</li>
  <li>-G Check external references</li>
  <li>-Gs Show rap decoding (debug useful in conjunction with -G)</li>
  <li>-P dont pause&nbsp; (bad status still reported and up to the controlling 
program to do something about it)</li>
</ul>
<p><b>options with arguments</b></p>
<p>can be stated as</p>
<p>-option space argument OR</p>
<p>-option=argument</p>
<p>the latter allows proper detection of the first genuine non-option file 
reference</p>
<ul>
  <li>-@[=]PrefixName this will over-ride $PBOPREFIX$ and use a direct over-ride</li>
</ul>
<p>&nbsp;</p>
<p>Compress files</p>
<ul>
  <li>-Z[=] &quot;default&quot;. Use internally decided files to compress which depend on 
  context of pbo type</li>
  <li>-Z[=] &quot;Comma,Separated,List&quot; </li>
  <li>-Z[=] &quot;file[.lst|.txt|&lt;.ext&gt;]&quot;<p>[.lst|.txt|&lt;.ext&gt;]&nbsp; can be either of 
  the defaults, or an explicit extension</p>
  </li>
</ul>
<p>Exclude files</p>
<ul>
  <li>-X[=] &quot;none&quot; exclude nothing</li>
  <li>-X[=] &quot;Comma,Separated,Exclude,List&quot; </li>
  <li>-X[=] ExcludeList[.lst|.txt|&lt;.ext&gt;] </li>
</ul>
<p>&nbsp;</p>
<ul>
  <li>-J Ignore lack of mission.sqm or config.cpp</li>
  <li>-D reDuction of description.ext</li>
  <li>-U allow unbinarised p3d</li>
  <li>-$ potentially allow unprefixed addons</li>
  <li>-Q Lint only (pretend to make a pbo, but just scan for errors (use in 
conjunction with G/GS)</li>
  <li>-W No DateStamps for files in pbo (helpful when re-generating consistent sha)</li>
</ul>
<p><b>LINT ONLY Q option</b></p>
<p>this option DOES NOT MAKE A PBO. it scans un-binarised wrp and p3d for errors 
(in addition to general rvmat and config checking)</p>
<p><b>EXTERNAL REFERENCES</b></p>
<p>-G Check external references when rapifying</p>
<p>This is a safety check that the p3d and paa files (eg) as detected in a 
config.cpp (eg) are present on the p: drive</p>
<p>You can safely create a pbo without this option. It is 'there' as a 
confidence check that you haven't created typos</p>
<p>Note that the dll only checks when rapifying or lintchecking *any* file. The 
-G option warns of missing files, -GS shows which ones</p>
<p><b>SHA/CRC SIGNATURES</b></p>
<p>sha key signatures (Arma) or crc checks (elite) are automatically appended to 
end of file. <b>when appropriate</b></p>
<hr>
<p><b><font size="4">Caveat. Bis unbinarised</font></b></p>
<p>MakePbo is <b>not</b> a drop in replacement for binpbo. Makepbo does <b>not</b> binarise p3d's and wrp files.</p>
<p>What it can do however is detect faults that binbpo does not. You really 
should use <b><span style="background-color: #FFFF00">makepbo -Q </span>before</b> 
you use binpbo</p>
<p><b>WrpFiles</b></p>
<p>&nbsp;&nbsp;&nbsp; Makepbo will fail with warning messages if you attempt to 
add an unbinarised wrp.</p>
<p>&nbsp;&nbsp;&nbsp; The 'correct' option to use is<b> -UQ[G]</b> : check the 
wrp external references and other wrp internals for 'bad-ness' (but do not make 
a pbo)</p>
<p><b>P3DFiles</b></p>
<p>&nbsp;&nbsp;&nbsp; Makepbo will fail with warning messages if you attempt to 
add an unbinarised p3d <font color="#FF0000">and do not use the -U option</font></p>
<p><font color="#FF0000">&nbsp;&nbsp;&nbsp; </font>The 'correct' option is to 
use <b>-U[G][Q]</b></p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b>This allows an unbinarised 
p3d to pass unmolested (and be checked for 'bad-ness').</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Adding the -Q option above simply 
allows the exe to use it's very powerful analytics before passing to binpbo</p>
<p>&nbsp;</p>
<p>&nbsp;MakePbo It is a popular exe for simply extracting an 
existing pbo, modifying the config.cpp (eg) and repackaging.</p>
<hr>
<font FACE="Consolas" SIZE="2">
<p><b>PBO PREFIX: <u>This section does not apply to ofp.</u></b></p>
<p><b>Prefixes apply to addons, not mission or campaign pbo's. if 
mission/campaign pbos have prefixes, they are ignored by the engine. Be careful 
with this terminology. An addon, can contain missions.</b></p>
<p>all references in this document to '$PBOPREFIX$' and PboPrefix.txt&nbsp; are replaced by $PBOPREFIX$.txt</p>
<p>the dll reads any of above but only creates
<font FACE="Consolas" SIZE="2">
$PBOPREFIX$.txt</font></p>
<p>Bis have severely stuffed it up with (lack of) relative addressing in ALL 
their files  except for missions (and even there got much of it confusingly 
wrong). </p>
<p>The idea than a tank can't refer to it's own data in it's own pbo is beyond 
ridiculous. Instead, all references are hard references referring back to (as it 
happens) the same pbo. This makes moving objects around as oops objects a 
nightmare.</p>
<p>However, bis also got the idea of a prefix *seriously* right.</p>
<p>A prefix, (or sometimes a presumed prefix) is embedded in the header of all 
addons.</p>
<p>This sets the location of the pbo in concrete relative to the engine's 
internal file addressing. It is variously called namespace, virtual drive space, 
and etc. For shorthand purposes and sheer convenience to an addon maker, it is the 'P:\' drive. (could be any 
drive, but P: has become a de-facto standard)</p>
<p>A prefix will be embedded in a pbo by makepbo under the following cascading rules:</p>
<ul>
  <li>Irrespective, no matter what, neither an ofp pbo or ANY 'mission' pbo will  
  have a prefix.</li>
  <li>A mission pbo is defined as one without a config.cpp AND has a mission.sqm 
  (mission ADDONS have config.cpp's)</li>
  <li>Although 'wrong' some pbo's have neither. These are addons.</li>
  <li>The -$ option will prevent a prefix under special conditions. See 
  below.</li>
  <li>The -P option over-rides any other form of prefix definition determined 
  by the dll. Otherwise</li>
  <li>If a 
<font FACE="Consolas" SIZE="2">
  $PBOPREFIX$</font>.txt file is detected in the &gt;&gt;&gt;primary&lt;&lt;&lt; 
  folder. It takes precedence. </li>
  <li>This is a method by which drag and drop applications can create prefix pbo 
  headers, without further intervention. </li>
  <li>The content of this file, becomes the prefix header. </li>
  <li>The dll determines the prefix based on the input\folder\name. Output 
  folder specifications (if any) play no part in prefix</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; makepbo any\where\fred -&gt;prefix = any\where\fred</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; makepbo fred -&gt;prefix=fred</p>
<ul>
  <li>-$ option (not recommended)</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bis arma engines allow for a pbo without a prefix to assume a prefix of the 
name of the pbo.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If and only if </p>
<blockquote>
  <ol>
    <li>the pbo is an arma family addon (mission pbo's do not have prefixes)</li>
    <li>the resulting prefix name is a unitary file Ie p:\fred (not a 
p:\somewhere\fred),</li>
    <li>the resulting unitary file name IS the output filename</li>
    <li>the -$ option is specified, </li>
  </ol>
</blockquote>
<p></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THEN no prefix will be written. (Otherwise the option is ignored).</p>
<p>This dll adds additional lines to the header and take the form of:</p>
<p>&nbsp;&nbsp;&nbsp; variable=value;</p>
<p>The most notable use of above is to specifically state THIS pbo's intended 
engine</p>
<p>&nbsp;&nbsp;&nbsp; Product=Arma3;</p>
<p>&nbsp;&nbsp;&nbsp; author=I am Famous;</p>
<p>&nbsp;&nbsp;&nbsp; prefix=what\ever&nbsp;&nbsp; (not recommended)</p>
<p>The previous kegetys single line statement</p>
<p>what\ever&nbsp; is supported (not recommended)</p>
<p>&nbsp;</p>
</font><hr>
<p><b>Reduction</b></p>
<p><b>-D</b> option will compile, then decompile *.fsm , *.bikb's and description ext 
in an effort to reduce #defines and extraneous data.</p>
<p>The resulting output text is intended to produce a smaller footprint, and 
remove #include dependencies</p>
<p>it will fail with an error message if desc.ext contains EXEC/EVALS</p>
</font><font FACE="Consolas" SIZE="2"><hr>
<p>

<font face="Arial">
<b>&nbsp;Compression</b></font></p>
<p>Any pbo can be compressed for ANY engine. Since many low grade pbo extractors 
'out there' don't understand compression, this can be used as a mild form of 
obfuscation.</p>
<p>The results of compressing <b>mission</b> pbos can achieve better than 75% reduction 
in payload.</p>
<p>For addons, the results are less spectacular (between 5..10%) because pax's 
(which form the majority of files in an addon) are generally the largest in size 
and are (mostly) pre-compressed anyway.</p>
<p>under no cicumstances will the dll compress init*.sqs or sqf</p>
<p><b>syntax: </b> </p>
</font><font FACE="Arial" SIZE="2">
<p>Default is no compression. (no -z option)</p>
</font><font FACE="Consolas" SIZE="2"><font FACE="Arial" SIZE="2">
<p></p>
<p></p>
</font>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<font FACE="Arial" SIZE="2">
<p>MakePbo -Z=&quot;Comma,Separated,<b>Ignore</b>,List&quot; [ otheroptions...] folder....</p>
<p>MakePbo -Z=<b>Ignore</b>List[&lt;.ext&gt;|.lst|.txt] [ otheroptions...] folder....</p>
</font>
<p><font FACE="Arial" SIZE="2">Makpbo -Z=default&nbsp;&nbsp;&nbsp; // use the 
dll's internal context-algorithm</font></p>
<p>The 1st method uses parameters directly from the command line. This list MUST 
be enclosed in quotes. (if ,,, or spaced args)</p>
<p>The 2nd method utilises (an often common) ignore list. The content of which 
should be same as a command line entry (obviously), except quotes in this case 
are optional.</p>
<p>.lst or .txt extension is optional for the 2nd method. You can alternatively 
specify a different .extension</p>
<p>compression will only occur to each 'file' if resulting output is smaller 
that original.</p>
<p>YOU MUST SPECIFY A LIST if using the Z option</p>
<p>If you want DEFAULT files to be compressed use  &quot;default&quot;</p>
<p>If you want no files to be compressed, don't specify Z !!!</p>
<p>&nbsp;</p>
<p>The current dll defaults to ignore are</p>
<p>*.wav</p>
<p>*.jpg</p>
<p>*.ogg</p>
<p></p>
<p>and for arma, this is extended to pac/paa files because of terrain streaming</p>
<p>if you want ALL files compressed use &quot;all&quot; (the dll will not 'see' .all 
extensions, and hence compress all files)</p>
<p>However, note that, under no circumstances will the dll compress a file to 
make it LARGER.</p>
<p>This frequently occurs for pax files. The result is, that pax will be stored 
untouched.</p>
<p>note that compression applies to file extensions not file names.</p>
<p>&quot;Comma, Separated, .Ignore, *.List&quot;</p>
<p>The format is pretty much free form. Spacing between args is permitted any of 
the following forms are mutually equivalent.</p>
<p>*.ogg</p>
<p>.ogg</p>
<p>ogg</p>
<p>Note that compression can take considerable time to achieve. It is 'safe' 
however to simply allow the dll to attempt to compress it's internal, default, 
file list.</p>
<p><b>NOTE for vbs2</b></p>
<p>encrypted AND compressed files *cannot* co-exist. If compression is 
specified, the pbo is encrypted along with any uncompressed files. The 
compressed files (if any) remain unencrypted.</p>
<hr>
<p>&nbsp;</p>
<font face="Arial">
<p><b>===Optional destination===</b></p>
<p>can take several forms</p>
<blockquote>
<p>*MakePbo [MyPath\]MyAddon&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
// -&gt;output to [MyPath\]MyAddon.pbo</p>
<p>MakePbo [MyPath\]MyAddon ThisAddon
<font face="Arial" SIZE="2">
&nbsp;&nbsp;&nbsp; //
</font>
-&gt;output to CurrentDir\ThisAddon.pbo</p>
<p>*MakePbo [MyPath\]MyAddon ThisAddon\&nbsp;&nbsp;&nbsp;
<font face="Arial" SIZE="2">
//
</font>
&nbsp;-&gt;output to CurrentDir\ThisAddon\MyAddon.pbo</p>
<p>MakePbo [MyPath\]MyAddon ThisAddon\ThisPbo
<font face="Arial" SIZE="2">
//
</font>
-&gt;output to CurrentDir\ThisAddon\ThisPbo.pbo</p>
<p>MakePbo [MyPath\]MyAddon \ThisAddon
<font face="Arial" SIZE="2">
//
</font>
-&gt;output to \ThisAddon.pbo</p>
<p>*MakePbo [MyPath\]MyAddon \ThisAddon\ 
<font face="Arial" SIZE="2">
//
</font>
-&gt;output to \ThisAddon\MyAddon.pbo</p>
<p>MakePbo [MyPath\]MyAddon \ThisAddon\ThisPbo
<font face="Arial" SIZE="2">
//
</font>
-&gt;output to \ThisAddon\ThisPbo.pbo</p>
</blockquote>
<p>Note that, under ALL circumstances, if 'ThisAddon' happens to be the name of 
a folder, it is equivalent to stating 'ThisAddon\'</p>
<p>Note: extension type is not required and has consequence for users specifying 
an XBO target but, in fact, the dll discovers it's a vbs2 lite mission.</p>
<p>under that, special, unique circumstance, the intended.xbo is renamed to .pbo 
(a vbs 2 lite quirk)</p>
<p>*MyAddon is subject to pboname.h. see versioning readme</p>
<hr>
<p><b>
<font face="Arial" SIZE="2">
PBO OUTPUT NAME
</font>
</b></p>
<p>the rules are as follows</p>
<p>'standard' behaviour is to place an NameOf.pbo in the parent folder of 
where\ever\NameOf Folder.</p>
<p>example:</p>
<p>makepbo any\where\fred //-&gt; any\where\fred.pbo</p>
<p>makepbo fred //-&gt; fred.pbo</p>
<p>==specifying output==</p>
<p>makepbo some\folder any\where -&gt;any\where\folder.pbo</p>
<p>makepbo some\folder any\where\this.pb0 -&gt; any\where\this.pbo</p>
</font>
<p>&nbsp;</p>
<font face="Arial">
<p>pboname.h</p>
<p>if a pboname.h is detected in the primary folder, it replaces the output 
name. </p>
<p>NOTE THAT</p>
<p>1) destination folders remain the same</p>
<p>2) if a destination PBO is named, the pboname.h is ignored</p>
<p>NOTE THAT</p>
<p>drives: and or \root\path specifications are as equally valid as relative 
addressing</p>
</font>
<p>&nbsp;</p>
</font><hr>
<p><b>-X PBO EXCLUSIONS</b><br>
<br>
Rules:<br>
<br>
In order of precedence:<br>
<br>
1) under no circumstances are (dot)xxx folders examined or included. They are what 
their intention is :- Hidden<br>
<br>
2) Option -N (No rapify, no binarise, no nada) is the wyswig option. No files 
are ignored, no files are examined, no files are checked. What you see is truly 
what you get.<br>
<br>
3) config.cpp<br>
<br>
It is very normal to exclude *.cpp *.h and *.hpp. After binarisation, they have 
done their job. The best way of including them in a pbo, is to simply not Rapify, 
(option -wysywig)<br>
<br>
EVEN IF *.cpp is specified to be excluded, a config.cpp file (and any of it's 
#includes) are special in that they will binarised to .bin and thus not actually 
ignored. Not included, but not ignored.<br>
<br>
4) If nothing is specified on the command line, the default exclusions are:<br>
&nbsp;</p>
<ul>
  <li>.folder +</li>
  <li>thumbs.db,*.txt,*.h,*.dep,*.cpp,*.bak,*.png,*.log,*.pew, *.hpp<br>
&nbsp;</li>
</ul>
<p>
This default list is likely to change in the future as bis keep moving 
goalposts.</p>
<p>
<br>
There is an unfortunate but popular use of hpp files as included sqf files. Bis 
in their wisdom call files not intended to be in the pbo, (dot)hpp. To 
accomodate users of popular and well respected addons such as cba use the 
following syntax</p>
<p>
-X=thumbs.db,*.txt,*.h,*.dep,*.cpp,*.bak,*.png,*.log,*.pew<br>
<br>
Command line options<br>
<br>
-X= none<br>
<br>
NOTHING will be excluded<br>
<br>
-X=&quot;comma,separated,list&quot;<br>
When more than one file type is excluded, eg, commas, the list must be specified 
between quotes. Spacing is permitted.<br>
<br>
-X= An\Exclude\File\Somewhere<br>
<br>
the dll accepts default extensions of .txt or .lst : There is no need to state 
SomeWhere.LST<br>
<br>
<br>
----<br>
<br>
exclusion syntax<br>
<br>
*.bak and .bak are synonomous<br>
Specific.file<br>
SpecificFolder<br>
<br>
<br>
Note that:<br>
the above syntax only supports the most primitive of wildcard (*.)<br>
there is no mechanism to exclude path\to\folder or path\to\file<br>
All folders of a given name will be excluded, All files similarly.<br>
&nbsp;</p>
<hr><font FACE="Consolas" SIZE="2">
<p><b>Versioning using pboname.h/hpp</b></p>
<p>mikero march 09</p>
<p>revised: june 2011</p>
<p>Preamble:</p>
<p>----------------</p>
<p>Pbo prefixing was introduced With Elite-Xbox and continues with Arma.</p>
<p>----------------------------------------------------</p>
<p>Essentially, the NameOf.pbo is entirely irrelevant.</p>
<p>----------------------------------------------------</p>
<p>All references to the contents of a pbo are by way of it's prefix, NOT, 
nameof.pbo</p>
<p>This means (as a test for yourself) you can rename ANY one of the official 
Addons to PinkElephants.pbo ,and nothing breaks.</p>
<p>As a result, versioning is possible. In ofp, this was a nightmare, requiring 
every mission that used that addon to be revised to requiredAddons[]= new name</p>
<p>In arma, simply create</p>
<p>MakePbo MyGreatAddon</p>
<p>later</p>
<p>MakePbo MyGreatAddonV1</p>
<p>MakePbo MyGreatAddonV2</p>
<p>and so on.</p>
<p>*providing* you haven't changed it's prefix, earlier missions and reliant 
addons, remain compatible.</p>
<p>There are several ways to achieve versioning</p>
<p>1) Makepbo.exe SameFolder. Rename Resultant pbo to whatever</p>
<p>2) MakePbo.exe SameFolder NewPboName</p>
<p>These options are difficult to achieve in a batch 'packing' enviroment where 
everything is hardwired</p>
<p>3) MakePbo.exe NewFolder.</p>
<p>This is an impossibility for P:MyGreatAddon because visitor and oxygen will 
look for oldname for existing models. It is also impossible for svn / git 
repositories.</p>
<p>4) use pboname.h in SameFolder</p>
<p>pboname.h/hpp overcomes these limitations and should be considered versioning 
documentation.</p>
<p>&nbsp;</p>
<p>The dll looks for 'pboname.h/hpp' in the primary folder. if encountered, the 
resultant pboname is altered to</p>
<p>pboname=&quot;MyBestAddonEver1.00V22&quot;; // or whatever</p>
<p>&nbsp;</p>
<p>the difference between 'h' and 'hpp' is that hpp will be included in your pbo, 
'h' will not</p>
<p>&nbsp;</p>
<p>See sample pboname.h</p>
<p>Note that pboname is ignored/over-ridden if you deliberately specifify an 
output pboname on the commandline (not an outputfolder, an outputpbo)</p>
<p>example</p>
<p>makepbo.exe MyAddon Some\Folder // pboname in effect</p>
<p>makepbo.exe MyAddon Some\Folder\SomePbo \\ pboname disabled</p>
</font>
<p><br>
<b><font size="5">Obfuscation. the -! option</font></b></p>

<p>Obfuscation has been introduced to protect people from thievery with arma3 
life servers (among others)</p>

<p>The dll will obfuscate a pbo making it difficult to impossible to extract. 
And, even if extracted, the files will be misleading. The pbo will be 
approximately 10..15% larger as a result.</p>

</body>

</html>